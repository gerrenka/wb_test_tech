// mocks/OrderRepository.go
package mocks

import (
	"context"

	"order-service/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// GetAllOrders provides a mock function with given fields:
func (_m *OrderRepository) GetAllOrders() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, orderUID
func (_m *OrderRepository) GetOrder(ctx context.Context, orderUID string) (*models.Order, error) {
	ret := _m.Called(ctx, orderUID)

	var r0 *models.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepository) SaveOrder(ctx context.Context, order models.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheOrderData provides a mock function with given fields: orderUID, orderData
func (_m *OrderRepository) CacheOrderData(orderUID string, orderData []byte) error {
	ret := _m.Called(orderUID, orderData)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(orderUID, orderData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCachedOrderData provides a mock function with given fields: orderUID
func (_m *OrderRepository) GetCachedOrderData(orderUID string) ([]byte, error) {
	ret := _m.Called(orderUID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(orderUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
